// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20190618040325_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.Addseq", "'Addseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Certseq", "'Certseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Commseq", "'Commseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Msgseq", "'Msgseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Notiseq", "'Notiseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Promoseq", "'Promoseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Reposeq", "'Reposeq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Roleseq", "'Roleseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Specseq", "'Specseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Transeq", "'Transeq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.Userseq", "'Userseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Addseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("AddressType")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Region")
                        .IsRequired();

                    b.Property<int>("Usr_Id");

                    b.Property<string>("street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Models.Card", b =>
                {
                    b.Property<string>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Card_Type")
                        .IsRequired();

                    b.HasKey("Number");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Certseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Certi_Img")
                        .IsRequired();

                    b.Property<string>("Certi_Title")
                        .IsRequired();

                    b.Property<string>("ESSN")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.HasKey("Id");

                    b.HasIndex("ESSN");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Commseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Desc");

                    b.Property<float>("Rate");

                    b.Property<int>("UserFrom_Id");

                    b.Property<int>("UserTo_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserFrom_Id");

                    b.HasIndex("UserTo_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.Property<string>("ESSN")
                        .ValueGeneratedOnAdd()
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("Bio");

                    b.Property<string>("Card_Id")
                        .IsRequired();

                    b.Property<string>("Degree")
                        .IsRequired();

                    b.Property<int>("Experience");

                    b.Property<string>("OfficialCard")
                        .IsRequired();

                    b.Property<int>("Salary");

                    b.Property<int>("Spec_Id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("User_Id");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("ESSN");

                    b.HasIndex("Card_Id");

                    b.HasIndex("Spec_Id");

                    b.HasIndex("User_Id")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Msgseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("Delievered")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Msg")
                        .IsRequired();

                    b.Property<bool?>("Read")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("UserFrom_Id");

                    b.Property<int>("UserTo_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserFrom_Id");

                    b.HasIndex("UserTo_Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Notiseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<bool?>("Read")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Tans_Id");

                    b.Property<int>("UserFrom_Id");

                    b.Property<int>("UserTo_Id");

                    b.HasKey("Id");

                    b.HasIndex("Tans_Id");

                    b.HasIndex("UserFrom_Id");

                    b.HasIndex("UserTo_Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.OnlineUser", b =>
                {
                    b.Property<string>("ConnectionId");

                    b.Property<int>("Usr_Id");

                    b.HasKey("ConnectionId", "Usr_Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("OnlineUsers");
                });

            modelBuilder.Entity("Models.Phone", b =>
                {
                    b.Property<int>("Usr_Id");

                    b.Property<string>("Number")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.HasKey("Usr_Id", "Number");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Promoseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Code");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<int>("Percentage");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Reposeq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Desc")
                        .IsRequired();

                    b.Property<int>("UserFrom_Id");

                    b.Property<int>("UserTo_Id");

                    b.Property<DateTime>("Zyara_Date");

                    b.HasKey("Id");

                    b.HasIndex("UserFrom_Id");

                    b.HasIndex("UserTo_Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Roleseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Role_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Specseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Spc_Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Spc_Name")
                        .IsUnique();

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Transeq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool?>("Accepted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<bool?>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(null);

                    b.Property<DateTime>("Date");

                    b.Property<int>("Doctor_Id");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<int>("Patient_Id");

                    b.Property<string>("QR_Code");

                    b.HasKey("Id");

                    b.HasIndex("Doctor_Id");

                    b.HasIndex("Patient_Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "Userseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Age");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<float>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0f);

                    b.Property<int>("Role_Id");

                    b.Property<int>("Widget")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.UserPromotion", b =>
                {
                    b.Property<int>("Prom_Id");

                    b.Property<int>("User_Id");

                    b.HasKey("Prom_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserPromotions");
                });

            modelBuilder.Entity("Models.UserToken", b =>
                {
                    b.Property<string>("TokenNumber");

                    b.Property<int>("Usr_Id");

                    b.HasKey("TokenNumber", "Usr_Id");

                    b.HasIndex("Usr_Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Certificate", b =>
                {
                    b.HasOne("Models.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.HasOne("Models.User", "UserFrom")
                        .WithMany("CommentsFrom")
                        .HasForeignKey("UserFrom_Id");

                    b.HasOne("Models.User", "UserTo")
                        .WithMany("CommentsTo")
                        .HasForeignKey("UserTo_Id");
                });

            modelBuilder.Entity("Models.Doctor", b =>
                {
                    b.HasOne("Models.Card", "Card")
                        .WithMany("Doctors")
                        .HasForeignKey("Card_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("Spec_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Models.Doctor", "User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.User", "UserFrom")
                        .WithMany("MessagesFrom")
                        .HasForeignKey("UserFrom_Id");

                    b.HasOne("Models.User", "UserTo")
                        .WithMany("MessagesTo")
                        .HasForeignKey("UserTo_Id");
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.HasOne("Models.Transaction", "Transaction")
                        .WithMany("Notifications")
                        .HasForeignKey("Tans_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "UserFrom")
                        .WithMany("NotificationsFrom")
                        .HasForeignKey("UserFrom_Id");

                    b.HasOne("Models.User", "UserTo")
                        .WithMany("NotificationsTo")
                        .HasForeignKey("UserTo_Id");
                });

            modelBuilder.Entity("Models.OnlineUser", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("OnlineUsers")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Phone", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Report", b =>
                {
                    b.HasOne("Models.User", "UserFrom")
                        .WithMany("ReportsFrom")
                        .HasForeignKey("UserFrom_Id");

                    b.HasOne("Models.User", "UserTo")
                        .WithMany("ReportsTo")
                        .HasForeignKey("UserTo_Id");
                });

            modelBuilder.Entity("Models.Transaction", b =>
                {
                    b.HasOne("Models.User", "Doctor")
                        .WithMany("TransactionsDoctor")
                        .HasForeignKey("Doctor_Id");

                    b.HasOne("Models.User", "Patient")
                        .WithMany("TransactionsPatient")
                        .HasForeignKey("Patient_Id");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.UserPromotion", b =>
                {
                    b.HasOne("Models.Promotion", "Promotion")
                        .WithMany("UserPromotions")
                        .HasForeignKey("Prom_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "User")
                        .WithMany("UserPromotions")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.UserToken", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("Usr_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
